USE stolen_vehicles_db;

-- Objective 1: Identify WHEN vehicles were stolen.

-- 1. Find the number of vehicles stolen each year

SELECT
	COUNT(vehicle_id) AS 'Vehicle ID',
	YEAR(date_stolen) AS Year
FROM stolen_vehicles
GROUP BY
	YEAR(date_stolen);

-- 2. Find the number of vehicles stolen each month

SELECT
	COUNT(vehicle_id) AS 'Vehicle ID',
	MONTH(date_stolen) AS Month
FROM stolen_vehicles
GROUP BY
	MONTH(date_stolen),
	YEAR(date_stolen)
ORDER BY
	MONTH(date_stolen);

-- 3. Find the number of vehicles stolen each day of the week.

SELECT
	COUNT(vehicle_id) AS 'Vehicle ID',
    DAYOFWEEK(date_stolen) AS 'Day of Week'
FROM
	stolen_vehicles
GROUP BY
	DAYOFWEEK(date_stolen)
ORDER BY 
	DAYOFWEEK(date_stolen);

-- 4. Replace the numeric day of week values with the full name of each day of the week (Sunday, Monday, Tuesday, etc.)

SELECT
	COUNT(vehicle_id) AS 'Vehicle ID',
    CASE
		WHEN DAYOFWEEK(date_stolen) = 1 THEN 'Sunday'
        WHEN DAYOFWEEK(date_stolen) = 2 THEN 'Monday'
        WHEN DAYOFWEEK(date_stolen) = 3 THEN 'Tuesday'
        WHEN DAYOFWEEK(date_stolen) = 4 THEN 'Wednesday'
        WHEN DAYOFWEEK(date_stolen) = 5 THEN 'Thursday'
        WHEN DAYOFWEEK(date_stolen) = 6 THEN 'Friday'
        WHEN DAYOFWEEK(date_stolen) = 7 THEN 'Saturday'
	END as 'Day of the Week'
FROM
	stolen_vehicles
GROUP BY
	DAYOFWEEK(date_stolen)
ORDER BY 
	DAYOFWEEK(date_stolen);

-- Objective 2: Identify WHICH vehicles were stolen.
-- 5. Find the vehicle types that are most often and least often stolen.

SELECT
	vehicle_type AS 'Vehicle Type',
    COUNT(vehicle_id) AS 'Number of Vehicles Stolen'
FROM stolen_vehicles
GROUP BY
	vehicle_type
ORDER BY
	COUNT(vehicle_id) DESC
LIMIT 1;

SELECT
	vehicle_type AS 'Vehicle Type',
    COUNT(vehicle_id) AS 'Number of Vehicles Stolen'
FROM stolen_vehicles
GROUP BY
	vehicle_type
ORDER BY
	COUNT(vehicle_id)
LIMIT 1;

-- 6. For each vehicle type, find the average age of the cars that are stolen.

SELECT
	vehicle_type AS 'Vehicle Type',
    AVG(YEAR(date_stolen) - model_year) AS avg_age
FROM stolen_vehicles
GROUP BY
	vehicle_type
ORDER BY
	avg_age DESC;

-- 7. For each vehicle type, find the percent of vehicles stolen that are luxury versus standard.

WITH lux_standard AS (SELECT
	sv.vehicle_type, 
	md.make_type,
    CASE
		WHEN md.make_type = 'Luxury' THEN 1
        ELSE 0
	END AS Luxury
FROM stolen_vehicles AS sv
LEFT JOIN make_details AS md
	ON sv.make_id = md.make_id)
    
SELECT 
	vehicle_type,
    SUM(luxury) / COUNT(luxury) * 100 AS percentage_luxury
FROM lux_standard
GROUP BY
	vehicle_type
ORDER BY percentage_luxury DESC; 

	

/* 8. Create a table where the rows represent the top 10 vehicle types, 
the columns represent the top 7 vehicle colors (plus 1 column for all other colors) 
and the values are the number of vehicles stolen.
*/

SELECT
	color,
	COUNT(vehicle_type) AS 'Number of Vehicles'
FROM stolen_vehicles
GROUP BY
	Color
ORDER BY 
	'Number of Vehicles' DESC
LIMIT 7;

SELECT 
	vehicle_type,
    COUNT(vehicle_id) AS number_vehicles,
    SUM(CASE When color = 'Silver' THEN 1 ELSE 0 
		END) AS Silver,
	SUM(CASE When color = 'White' THEN 1 ELSE 0 
		END) AS White,
	SUM(CASE When color = 'Black' THEN 1 ELSE 0 
		END) AS Black,
	SUM(CASE When color = 'Blue' THEN 1 ELSE 0 
		END) AS Blue,
	SUM(CASE When color = 'Red' THEN 1 ELSE 0 
		END) AS Red,
	SUM(CASE When color = 'Grey' THEN 1 ELSE 0 
		END) AS Grey,
	SUM(CASE When color = 'Green' THEN 1 ELSE 0 
		END) AS Green,
	SUM(CASE When color IN('Gold', 'Brown', 'Yellow', 'Orange', 'Purple', 'Cream', 'Pink') THEN 1 ELSE 0 
		END) AS Other
FROM stolen_vehicles
GROUP BY
	vehicle_type
ORDER BY 
	number_vehicles DESC
LIMIT 10;


-- Objective 3: Identify WHERE vehicles are likely to be stolen

-- 9. Find the number of vehicles that were stolen in each region.

SELECT 
	l.region AS Region,
	COUNT(sv.vehicle_id) AS Num_of_Vehicles
FROM 
	locations AS l
LEFT JOIN stolen_vehicles AS sv
	ON l.location_id = sv.location_id
GROUP BY
	l.region
ORDER BY 
	Num_of_Vehicles DESC;
	

-- 10. Combine the previous output with the population and density statistics for each region.

SELECT 
	l.region AS Region,
	COUNT(sv.vehicle_id) AS Num_of_Vehicles,
    l.population,
    l.density
FROM 
	locations AS l
LEFT JOIN stolen_vehicles AS sv
	ON l.location_id = sv.location_id
GROUP BY
	l.region,
    l.population,
    l.density
ORDER BY 
	Num_of_Vehicles DESC;

-- 11. Do the types of vehicles stolen in the three most dense regions differ from the three least dense regions?

-- Most
(SELECT 
	'High Density' ,
	sv.vehicle_type,
    COUNT(sv.vehicle_id) AS Num_of_Vehicles
FROM 
	locations AS l
LEFT JOIN stolen_vehicles AS sv
	ON l.location_id = sv.location_id
WHERE 
	l.region IN ('Auckland', 'Nelson', 'Wellington')
GROUP BY 
	sv.vehicle_type 
ORDER BY
	Num_of_Vehicles DESC
LIMIT 5)
UNION
-- Least
(SELECT 
	'Low Density',
	sv.vehicle_type,
    COUNT(sv.vehicle_id) AS Num_of_Vehicles
FROM 
	locations AS l
LEFT JOIN stolen_vehicles AS sv
	ON l.location_id = sv.location_id
WHERE 
	l.region IN ('Otago', 'Gisborne', 'Southland')
GROUP BY 
	sv.vehicle_type 
ORDER BY
	Num_of_Vehicles DESC
LIMIT 5);

-- 12. How many total vehicles were stolen in the most dense region?

SELECT
	l.region,
	COUNT(sv.vehicle_id) As Num_of_Vehicles
FROM locations AS l
LEFT JOIN stolen_vehicles AS sv
	ON sv.location_id = l.location_id
GROUP By
	l.region
ORDER BY
	Num_of_Vehicles DESC
LIMIT 1;




